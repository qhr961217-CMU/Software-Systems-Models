//
// 17-651: FSP model of a simple infusion pump
//
// ASSUMPTIONS
// - The user can choose, in the setup phase, which item of info to enter next.
// - The simple enter_value action is a simple number pad where the user enters
//   numeric values.
// - There exist 'set' and 'cancel' buttons, which are the targets of press_set
//   and press_cancel.
// - When the user turns the unit off, the unit will be in a state as if it was
//   just plugged in.
//

//
// Set of actions that the user of the LTSA tool can control in an
// animation of this model.
//

const MaxLineNum = 2
range LineIDs = 1 .. MaxLineNum

menu UserControlMenu = {
	// POWER_SYSTEM
	turn_on, plug_in, unplug, turn_off, replace_batt, restore_elec,

	// PUMP
	line[i:LineIDs].set_rate, line[i:LineIDs].clear_rate,
	line[i:LineIDs].change_settings, line[i:LineIDs].confirm_settings,
	line[i:LineIDs].connect_line, line[i:LineIDs].dispense_main_med_flow,
	line[i:LineIDs].enter_value, line[i:LineIDs].lock_line, line[i:LineIDs].erase_and_unlock_line,
	line[i:LineIDs].lock_unit, line[i:LineIDs].press_cancel, 
    line[i:LineIDs].press_set, line[i:LineIDs].unlock_unit,
	line[i:LineIDs].fix_line, line[i:LineIDs].silence_alarm
}

//=====================
// Power System Process 
//=====================

const ElecBroken = 0
const ElecWorking = 1
range ElecStateT = ElecBroken .. ElecWorking

const Unplugged = 0
const Plugged = 1
range PlugStateT = Unplugged .. Plugged

const BattBroken = 0
const BattWorking = 1
range BattStateT = BattBroken .. BattWorking

const PowerOff = 0
const PowerOn = 1
range PowerStateT = PowerOff .. PowerOn

POWER_SYSTEM = SUB_POWER_SYSTEM[ElecWorking][Unplugged][BattWorking][PowerOff],
SUB_POWER_SYSTEM[elec:ElecStateT][plug:PlugStateT][batt:BattStateT][power:PowerStateT] = (
	// The power system is able to be turned on
	when (power == PowerOff && (batt == BattWorking || (elec == ElecWorking && plug == Plugged)))
		turn_on -> SUB_POWER_SYSTEM[elec][plug][batt][PowerOn]
	|
	// The power system is already working - supplied by either sources
	when (power == PowerOn)
		turn_off -> SUB_POWER_SYSTEM[elec][plug][batt][PowerOff]
	|
	// The power is supplied by both
	when (power == PowerOn && batt == BattWorking && elec == ElecWorking && plug == Plugged)
		unplug -> SUB_POWER_SYSTEM[elec][Unplugged][batt][PowerOn]
	|
	when (power == PowerOn && batt == BattWorking && elec == ElecWorking && plug == Plugged)
		elec_failure -> SUB_POWER_SYSTEM[ElecBroken][plug][batt][PowerOn]
	|
	when (power == PowerOn && batt == BattWorking && elec == ElecWorking && plug == Plugged)
		batt_failure -> SUB_POWER_SYSTEM[elec][plug][BattBroken][PowerOn]
	|
	// The power is supplied solely by electricity
	when (power == PowerOn && batt == BattBroken && elec == ElecWorking && plug == Plugged)
		unplug -> power_failure -> SUB_POWER_SYSTEM[elec][Unplugged][batt][PowerOff]
	|
	when (power == PowerOn && batt == BattBroken && elec == ElecWorking && plug == Plugged)
		power_failure -> SUB_POWER_SYSTEM[ElecBroken][plug][batt][PowerOff]
	|
	// The power is supplied solely by the battery
	when (power == PowerOn && batt == BattWorking && (elec == ElecBroken || plug == Unplugged))
		power_failure -> SUB_POWER_SYSTEM[elec][plug][BattBroken][PowerOff]
	|
	// The battery is not working properly
	when (batt == BattBroken)
		// Replace the battery
		replace_batt -> SUB_POWER_SYSTEM[elec][plug][BattWorking][power]
	|
	// The cord is unplugged
	when (plug == Unplugged)
		// Plug in the cord
		plug_in -> SUB_POWER_SYSTEM[elec][Plugged][batt][power]
	|
	// The external electricity is broken
	when (elec == ElecBroken)
		// Restore the external electricity
		restore_elec -> SUB_POWER_SYSTEM[ElecWorking][plug][batt][power]
).

//=====================
// Line Process 
//=====================


const LineBroken = 0
const LineWorking = 1
range LineStateT = LineBroken .. LineWorking

//
// States of the pump settings
//
const ParamsNotSet = 0    // pump parameters not set yet
const ParamsSet    = 1    // pump parameters already set
range ParamsStateT = ParamsNotSet .. ParamsSet

//
// Locked/unlocked states of a line with respect to a pump channel
//
const LineUnlocked = 0  // line not locked into a pump channel 
const LineLocked   = 1  // line locked into a pump channel
range LineLockStateT = LineUnlocked .. LineLocked

//
// Locked/unlocked states of the pump unit
//
const UnitUnlocked = 0  // the keypad of the pump is not locked
const UnitLocked   = 1  // the keypad of the pump is locked
range UnitLockStateT = UnitUnlocked .. UnitLocked

LINE = LINE_OFF,
LINE_OFF = (
	turn_on -> LINE_SETUP[ParamsNotSet][LineWorking][LineUnlocked]
),

//
// Line in setup mode:
// - Once required line parameters (just rate in this case) are set,
//   physical connections can be made and line can be locked
//
LINE_SETUP[params:ParamsStateT][state:LineStateT][lock:LineLockStateT] = (
	power_failure -> LINE_OFF
	|
	turn_off -> LINE_OFF
	|
	when (state == LineBroken)
		fix_line -> LINE_SETUP[params][LineWorking][lock]
	|
	when (state == LineWorking)
		line_break -> LINE_SETUP[params][LineBroken][lock]
	|
	when (params == ParamsNotSet && state == LineWorking && lock == LineUnlocked)
		set_rate -> enter_value ->
            (press_set -> LINE_SETUP[ParamsSet][state][lock]
             |
             press_cancel -> LINE_SETUP[ParamsNotSet][state][lock])
	|
	when (params == ParamsSet && state == LineWorking && lock == LineUnlocked)
        clear_rate -> LINE_SETUP[ParamsNotSet][state][lock]
    |
    when (params == ParamsSet && state == LineWorking && lock == LineUnlocked)
        connect_line -> purge_air -> lock_line -> LINE_SETUP[params][state][LineLocked]
    |
    when (params == ParamsSet && state == LineWorking && lock == LineLocked)
        confirm_settings -> LINE_INFUSION[UnitUnlocked]
    |
    when (params == ParamsSet && state == LineWorking && lock == LineLocked)
        erase_and_unlock_line -> LINE_SETUP[params][state][LineUnlocked]
),

//
// Line in infusion mode:
// - Always be able to turn the line off, even if locked
// - Allow the user to lock/unlock the unit
// - Errors could occur with the line (e.g., line became pinched or plugged)
//
LINE_INFUSION[unitLock:UnitLockStateT] = (
	power_failure -> LINE_OFF
	|
	turn_off -> LINE_OFF
	|
	line_break -> sound_alarm -> LINE_SETUP[ParamsSet][LineBroken][LineUnlocked]
	|
	when (unitLock == UnitUnlocked)
        change_settings -> LINE_SETUP[ParamsSet][LineWorking][LineLocked]
    |
    when (unitLock == UnitUnlocked)
        lock_unit -> LINE_INFUSION[UnitLocked]
    |
    when (unitLock == UnitLocked)
        unlock_unit -> LINE_INFUSION[UnitUnlocked]
    |
	when (unitLock == UnitLocked)
    	dispense_main_med_flow -> LINE_INFUSION[unitLock]
).


//=====================
// Alarm Process 
//=====================

//
// States of the pump alarm
//
const AlarmSilenced  = 0    // Alarm currently inactive
const AlarmActivated = 1    // Alarm currently active
range AlarmStateT = AlarmSilenced .. AlarmActivated

range FailedNumStateT = 0 .. MaxLineNum

// Nurses can silence the alarm even though the problem is not solved
ALARM = ALARM_POWER_OFF,
ALARM_POWER_OFF = (
	turn_on -> SUB_ALARM[AlarmSilenced][0]
),
SUB_ALARM[alarmState:AlarmStateT][failedNum:FailedNumStateT] = (
	power_failure -> ALARM_POWER_OFF
	|
	turn_off -> ALARM_POWER_OFF
	|
	when (alarmState == AlarmActivated)
		alarm_sound -> SUB_ALARM[alarmState][failedNum]
	|
	when (alarmState == AlarmActivated)
		silence_alarm -> SUB_ALARM[AlarmSilenced][failedNum]
	|
	when (failedNum < MaxLineNum)
		line_break -> SUB_ALARM[AlarmActivated][failedNum+1]
	|
	when (failedNum == 1)
		fix_line -> SUB_ALARM[AlarmSilenced][failedNum-1]
	|
	when (failedNum > 1)
		fix_line -> SUB_ALARM[AlarmActivated][failedNum-1]
).


||PUMP = (line[LineIDs]:LINE || POWER_SYSTEM || {line[LineIDs]}::ALARM) /
	{turn_on / line[LineIDs].turn_on,
	turn_off / line[LineIDs].turn_off,
	power_failure / line[LineIDs].power_failure,
	silence_alarm / line[LineIDs].silence_alarm,
	alarm_sound / line[LineIDs].alarm_sound}.

//=====================
// Properties
//=====================